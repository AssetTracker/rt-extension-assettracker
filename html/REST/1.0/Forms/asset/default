%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2009 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
%# REST/1.0/Forms/asset/default
%#
<%ARGS>
$id
$changes => {}
$fields => undef
$args => undef
</%ARGS>
<%INIT>
use MIME::Entity;
use RT::Interface::REST;

my $cf_spec = RT::Interface::REST->custom_field_spec(1);

my @comments;
my ($c, $o, $k, $e) = ("", [], {}, 0);
my %data   = %$changes;
my $asset  = new RTx::AssetTracker::Asset $session{CurrentUser};
my @dates  = qw(Created LastUpdated);
my @people = RTx::AssetTracker::Type->RoleGroupTypes();
my @create = ( qw(Type Name Description Status),
               RTx::AssetTracker::Type->RoleGroupTypes() );
my @simple = qw(Name Status);
my %dates  = map {lc $_ => $_} @dates;
my %people = map {lc $_ => $_} @people;
my %create = map {lc $_ => $_} @create;
my %simple = map {lc $_ => $_} @simple;

# Are we dealing with an existing asset?
if ($id ne 'new') {
    $asset->Load($id);
    if (!$asset->Id) {
        return [ "# Asset $id does not exist.", [], {}, 1 ];
    }
    elsif (!$asset->CurrentUserHasRight('ShowAsset') ||
           (%data && !$asset->CurrentUserHasRight('ModifyAsset')))
    {
        my $act = %data ? "modify" : "display";
        return [ "# You are not allowed to $act asset $id.", [], {}, 1 ];
    }
}
else {
    if (!keys(%data)) {
        # GET asset/new: Return a suitable default form.
        # We get defaults from type/1 (XXX: What if it isn't there?).
        my $type = new RTx::AssetTracker::Type $session{CurrentUser};
        $type->Load(1);

        return [
            "# Required: id, Type",
            [ ( qw(id Type Name Description Status TransactionData),
                RTx::AssetTracker::Type->RoleGroupTypes() ) ],
            {
                id               => "asset/new",
                Type             => $type->Name,
                Name             => "",
                Description      => "",
                Status           => "new",
                TransactionData  => "",
		map { $_ => [] } RTx::AssetTracker::Type->RoleGroupTypes(),
            },
            0
        ];
    }
    else {
        # We'll create a new asset, and fall through to set fields that
        # can't be set in the call to Create().
        my (%v, $transactiondata);

        foreach my $k (keys %data) {
            # flexibly parse any dates
            if ($dates{lc $k}) {
                my $time = new RT::Date $session{CurrentUser};
                $time->Set(Format => 'unknown', Value => $data{$k});
                $data{$k} = $time->ISO;
            }

            if (exists $create{lc $k}) {
                $v{$create{lc $k}} = delete $data{$k};
            }
            # Set custom field
            elsif ($k =~ /^$cf_spec/) {
                my $key = $1 || $2;

                my $cf = RT::CustomField->new( $session{CurrentUser} );
                $cf->LoadByNameAndAssetType( Name => $key, Type => $data{Type} || $v{Type} );
                unless ( $cf->id ) {
                    $cf->LoadByNameAndAssetType( Name => $key, Type => 0 );
                }

                if (not $cf->id) {
                    push @comments, "# Invalid custom field name ($key)";
                    delete $data{$k};
                    next;
                }
                $v{"CustomField-".$cf->Id()} = delete $data{$k};
            }
            elsif (lc $k eq 'transactiondata') {
                $transactiondata = delete $data{$k};
            }
        }

        # people fields allow multiple values
        $v{$_} = vsplit($v{$_}) foreach ( grep $create{lc $_}, @people );

        if ($transactiondata) {
            $v{TransactionData} = $transactiondata;
        }

        my($tid,$trid,$terr) = $asset->Create(%v);    
        unless ($tid) {
            push(@comments, "# Could not create asset.");
            push(@comments, "# " . $terr);
            goto DONE;
        }

        delete $data{id};
        $id = $asset->Id;
        push(@comments, "# Asset $id created.");
        # see if the hash is empty
        goto DONE if ! keys(%data);
    }
}

# Now we know we're dealing with an existing asset.
if (!keys(%data)) {
    my ($time, $key, $val, @data);

    push @data, [ id    => "asset/".$asset->Id   ];
    push @data, [ Type  => $asset->TypeObj->Name ] 
	if (!%$fields || exists $fields->{lc 'Type'});
    push @data, [ Creator => $asset->CreatorObj->Name ]
	if (!%$fields || exists $fields->{lc 'Creator'});

    foreach (qw(Name Description Status)) {
	next unless (!%$fields || (exists $fields->{lc $_}));
        push @data, [$_ => $asset->$_ ];
    }

    foreach $key (@people) {
        my $group = $key . 'RoleGroup';
        next unless (!%$fields || (exists $fields->{$group}));
        push @data, [ $key => [ $asset->$group->MemberEmailAddresses ] ];
    }

    $time = new RT::Date ($session{CurrentUser});
    foreach $key (@dates) {
	next unless (!%$fields || (exists $fields->{lc $key}));
        $time->Set(Format => 'sql', Value => $asset->$key);
        push @data, [ $key => $time->AsString ];
    }

    # Display custom fields
    my $CustomFields = $asset->CustomFields;
    while (my $cf = $CustomFields->Next()) {
        next unless !%$fields
                 || exists $fields->{"cf.{".lc($cf->Name)."}"}
                 || exists $fields->{"cf-".lc $cf->Name};

        my $vals = $asset->CustomFieldValues($cf->Id());
        my @out = ();
        if ( $cf->SingleValue ) {
            my $v = $vals->Next;
            push @out, $v->Content if $v;
        }
        else {
            while (my $v = $vals->Next()) {
                my $content = $v->Content;
                $content =~ s/'/\\'/g;
                if ( $v->Content =~ /,/ ) {
                    push @out, q{'} . $content . q{'};
                }
                else {
                    push @out, $content;
                }
            }
        }
        push @data, [ ('CF.{' . $cf->Name . '}') => join ',', @out ];
    }

    my %k = map {@$_} @data;
    $o = [ map {$_->[0]} @data ];
    $k = \%k;
}
else {
    my ($get, $set, $key, $val, $n, $s);

    foreach $key (keys %data) {
        $val = $data{$key};
        $key = lc $key;
        $n = 1;

        if (ref $val eq 'ARRAY') {
            unless ( $people{$key} ) {
                $n = 0;
                $s = "$key may have only one value.";
                goto SET;
            }
        }

        if ($key =~ /^type$/i) {
            next if $val eq $asset->TypeObj->Name;
            ($n, $s) = $asset->SetType($val);
        }
        elsif (exists $simple{$key}) {
            $key = $simple{$key};
            $set = "Set$key";

            next if (($val eq $asset->$key)|| ($asset->$key =~ /^\d+$/ && $val == $asset->$key));
            ($n, $s) = $asset->$set("$val");
        }
        elsif (exists $dates{$key}) {
            $key = $dates{$key};

            # We try to detect whether it should update a field by checking
            # whether its current value equals the entered value. Since the
            # LastUpdated field is automatically updated as other columns are
            # changed, it is not properly skipped. Users cannot update this
            # field anyway.
            next if $key eq 'LastUpdated';

            $set = "Set$key";

            my $time = new RT::Date $session{CurrentUser};
            $time->Set(Format => 'sql', Value => $asset->$key);
            next if ($val =~ /^not set$/i || $val eq $time->AsString);

            $time->Set(Format => 'unknown', Value => $val);
            ($n, $s) = $asset->$set($time->ISO);
        }
        elsif (exists $people{$key}) {
            $key = $people{$key};
            my ($p, @msgs);

            my %new  = map {$_=>1} @{ vsplit($val) };
            my %old  = map {$_=>1} $asset->$key->MemberEmailAddresses;
            my $type = $key eq 'Requestors' ? 'Requestor' : $key;

            foreach $p (keys %old) {
                unless (exists $new{$p}) {
                    ($s, $n) = $asset->DeleteWatcher(Type => $type,
                                                      Email => $p);
                    push @msgs, [ $s, $n ];
                }
            }
            foreach $p (keys %new) {
                # XXX: This is a stupid test.
                unless ($p =~ /^[\w.+-]+\@([\w.-]+\.)*\w+.?$/) {
                    $s = 0;
                    $n = "$p is not a valid email address.";
                    push @msgs, [ $s, $n ];
                    next;
                }
                unless ($asset->IsWatcher(Type => $type, Email => $p)) {
                    ($s, $n) = $asset->AddWatcher(Type => $type,
                                                   Email => $p);
                    push @msgs, [ $s, $n ];
                }
            }

            $n = 1;
            if (@msgs = grep {$_->[0] == 0} @msgs) {
                $n = 0;
                $s = join "\n", map {"# ".$_->[1]} @msgs;
                $s =~ s/^# //;
            }
        }
        # Set custom field
        elsif ($key =~ /^$cf_spec/) {
            $key = $1 || $2;

            my $cf = RT::CustomField->new( $session{CurrentUser} );
            $cf->LoadByNameAndAssetType( Name => $key, Type => $asset->Type );
            unless ( $cf->id ) {
                $cf->LoadByNameAndAssetType( Name => $key, Type => 0 );
            }

            if (not $cf->id) {
                $n = 0;
                $s = "Unknown custom field.";
            }
            else {
                my $vals = $asset->CustomFieldValues($cf->id);

                if ( $cf->SingleValue ) {
                    my $old = $vals->Next;
                    if ( $old ) {
                        if ( $val ne $old->Content ) {
                            $old->Delete;
                            ($n, $s) = $asset->AddCustomFieldValue(
                                 Field => $cf, Value => $val );
                            $s =~ s/^# // if defined $s;
                        }
                    }
                    else {
                        ($n, $s) = $asset->AddCustomFieldValue(
                             Field => $cf, Value => $val );
                        $s =~ s/^# // if defined $s;
                    }
                }
                else {
                    my @new;
                    my ( $a, $b ) = split /,/, $val, 2;
                    while ($a) {
                        no warnings 'uninitialized';
                        if ( $a =~ /^'/ ) {
                            my $s = $a;
                            while ( $a !~ /'$/ || ( $a !~ /(\\\\)+'$/
                                            && $a =~ /(\\)+'$/ ) ) {
                                ( $a, $b ) = split /,/, $b, 2;
                                $s .= ',' . $a;
                            }
                            $s =~ s/^'//;
                            $s =~ s/'$//;
                            $s =~ s/\\'/'/g;
                            push @new, $s;
                        }
                        elsif ( $a =~ /^q{/ ) {
                            my $s = $a;
                            while ( $a !~ /}$/ ) {
                                ( $a, $b ) = split /,/, $b, 2;
                                $s .= ',' . $a;
                            }
                            $s =~ s/^q{//;
                            $s =~ s/}//;
                            push @new, $s;
                        }
                        else {
                            push @new, $a;
                        }
                        ( $a, $b ) = split /,/, $b, 2;
                    }

                    my %new;
                    $new{$_}++ for @new;

                    while (my $v = $vals->Next()) {
                        my $c = $v->Content;
                        if ( $new{$c} ) {
                            $new{$c}--;
                        }
                        else {
                            $v->Delete();
                        }
                    }
                    for ( @new ) {
                        while ( $new{$_} && $new{$_}-- ) {
                            ($n, $s) = $asset->AddCustomFieldValue(
                                Field => $cf, Value => $_ );
                            $s =~ s/^# // if defined $s;
                        }
                    }
                }
            }
        }
        elsif ($key ne 'id' && $key ne 'type' && $key ne 'creator') {
            $n = 0;
            $s = "Unknown field.";
        }

    SET:
        if ($n == 0) {
            $e = 1;
            push @comments, "# $key: $s";
            unless (@$o) {
                my %o = keys %$changes;
                delete $o{id};
                @$o = ("id", keys %o);
                $k = $changes;
            }
        }
    }
    push(@comments, "# Asset ".$asset->id." updated.") unless $n == 0;
}

DONE:
$c ||= join("\n", @comments) if @comments;
return [$c, $o, $k, $e];

</%INIT>
