%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2004 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$i => undef
@Format => undef
$record => undef
$maxitems => undef
$Depth => undef
$Warning => undef
</%ARGS>

<%PERL>
$m->out( '<TR class="' . ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' ) . '" >' );
my $item;
foreach my $column (@Format) {
    if ( defined $column->{title} && $column->{title} eq 'NEWLINE' ) {
	while ($item < $maxitems) {
	    $m->out('<td class="collection-as-table">&nbsp;</td>');
	    $item++;
	}
	$item = 0;
        $m->out('</TR>');
        $m->flush_buffer();
        $m->out( '<TR class="' . 
               ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' ) . '" >' );
        next;
    }
    $item++;
    $m->out('<td class="collection-as-table">');
    foreach my $subcol ( @{ $column->{output} } ) {
        if ( $subcol =~ /^__(.*?)__$/o ) {
            my $col = $1;
            my $value = $m->comp('/Elements/RTx__AssetTracker__Asset/ColumnMap', Name => $col, Attr => 'value');

            if ( $value && ref($value)) {
		# All HTML snippets are returned by the callback function
		# as scalar references.  Data fetched from the objects are
		# plain scalars, and needs to be escaped properly.
#$RT::Logger->crit("Column: $col Values: " . join(':',(&{ $value } ( $record, $i ))));
		$m->out( 
		    map { ref($_) ? $$_ : $m->interp->apply_escapes( $_ => 'h' ) }
		    &{ $value } ( $record, $i )
	        );
            } else {
		# Simple value; just escape it.
                $m->out( $m->interp->apply_escapes( $value => 'h' ) );
            }
        }
        else {
            $m->out( Encode::decode_utf8($subcol) );
        }
    }
    $m->out('</td>');
}
$m->out('</TR>');
</%PERL>
