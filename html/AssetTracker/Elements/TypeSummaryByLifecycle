%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%perl>
    foreach my $lifecycle ( map $lifecycle{$_}, sort keys %lifecycle ) {
    my @cur_statuses = grep $lifecycle->IsValid($_), @statuses;
    next unless @cur_statuses;
</%perl>

<table border="0" cellspacing="0" cellpadding="1" width="100%" class="type-summary">

<tr>
    <th class="collection-as-table"><&|/l&>Type</&></th>
% for my $status ( @cur_statuses ) {
    <th class="collection-as-table"><% loc($status) %></th>
% }
</tr>

<%PERL>
my $i = 0;
for my $type (@types) {
    next if lc($type->{Lifecycle} || '') ne lc $lifecycle->Name;

    $i++;
</%PERL>
<tr class="<% $i%2 ? 'oddline' : 'evenline'%>" >

<td>
    <a href="<% $link_all->($type, \@cur_statuses) %>" title="<% $type->{Description} %>"><% $type->{Name} %></a>
</td>

%   for my $status (@cur_statuses) {
<td align="right">
    <a href="<% $link_status->($type, $status) %>"><% $data->{$type->{id}}->{lc $status } || '-' %></a>
</td>
%   }
</tr>
% }
</table>
% }
<%INIT>
my $build_search_link = sub {
    my ($type_name, $extra_query) = @_;
    $type_name =~ s/(['\\])/\\$1/g; #'

    return RT->Config->Get('WebPath')
         . "/AssetTracker/Search/Results.html?Query="
         . $m->interp->apply_escapes("Type = '$type_name' AND $extra_query", 'u');
};

my $link_all = sub {
    my ($type, $all_statuses) = @_;
    return $build_search_link->($type->{Name}, "(".join(" OR ", map "Status = '$_'", @$all_statuses).")");
};

my $link_status = sub {
    my ($type, $status) = @_;
    return $build_search_link->($type->{Name}, "Status = '$status'");
};

$m->callback(
    CallbackName        => 'LinkBuilders',
    build_search_link   => \$build_search_link,
    link_all            => \$link_all,
    link_status         => \$link_status,
);

my $Types = RTx::AssetTracker::Types->new( $session{'CurrentUser'} );
$Types->UnLimit();
$m->callback( CallbackName => 'SQLFilter', Types => $Types );

my @types = grep $type_filter->($_), @{ $Types->ItemsArrayRef };
$m->callback( CallbackName => 'Filter', Types => \@types );

@types = map {
    {  id          => $_->Id,
       Name        => $_->Name,
       Description => $_->Description || '',
       Lifecycle   => $_->Lifecycle->Name,
    }
} grep $_, @types;

my %lifecycle;

for my $type (@types) {
    my $cycle = RT::Lifecycle->Load( $type->{'Lifecycle'} );
    $lifecycle{ lc $cycle->Name } = $cycle;
}

unless (@statuses) {
    my %seen;
    foreach my $set ( 'initial', 'active' ) {
        foreach my $lifecycle ( map $lifecycle{$_}, sort keys %lifecycle ) {
            push @statuses, grep !$seen{ lc $_ }++, $lifecycle->Valid($set);
        }
    }
}

my $data     = {};
my $statuses = {};

use RT::Report::Assets;
my $report = RT::Report::Assets->new( RT->SystemUser );
my $query =
    "(".
    join(" OR ", map {s{(['\\])}{\\$1}g; "Status = '$_'"} @statuses) #'
    .") AND (".
    join(' OR ', map "Type = ".$_->{id}, @types)
    .")";
$query = 'id < 0' unless @types;
$report->SetupGroupings( Query => $query, GroupBy => [qw(Status Type)] );

while ( my $entry = $report->Next ) {
    $data->{ $entry->__Value("Type") }->{ $entry->__Value("Status") }
        = $entry->__Value('id');
    $statuses->{ $entry->__Value("Status") } = 1;
}
</%INIT>
<%ARGS>
$type_filter => undef
@statuses => ()
</%ARGS>
